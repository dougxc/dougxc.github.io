--- old/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java	2018-10-23 15:09:17.000000000 +0200
+++ new/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java	2018-10-23 15:09:17.000000000 +0200
@@ -725,7 +725,7 @@
             return config().invalidVtableIndex;
         }
         if (holder.isInterface()) {
-            if (resolved.isInterface()) {
+            if (resolved.isInterface() || !resolved.isLinked()) {
                 return config().invalidVtableIndex;
             }
             return getVtableIndexForInterfaceMethod(resolved);
--- old/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaMethod.java	2018-10-23 15:09:18.000000000 +0200
+++ new/test/hotspot/jtreg/compiler/jvmci/jdk.vm.ci.runtime.test/src/jdk/vm/ci/runtime/test/TestResolvedJavaMethod.java	2018-10-23 15:09:18.000000000 +0200
@@ -429,11 +429,24 @@
         }
     }
 
+    static class UnlinkedType {
+    }
+
     /**
      * All public non-final methods should be available in the vtable.
      */
     @Test
     public void testVirtualMethodTableAccess() {
+        ResolvedJavaType unlinkedType = metaAccess.lookupJavaType(UnlinkedType.class);
+        assertTrue(!unlinkedType.isLinked());
+        for (Class<?> c : classes) {
+            if (c.isInterface()) {
+                for (Method m : c.getDeclaredMethods()) {
+                    ResolvedJavaMethod method = metaAccess.lookupJavaMethod(m);
+                    method.isInVirtualMethodTable(unlinkedType);
+                }
+            }
+        }
         for (Class<?> c : classes) {
             if (c.isPrimitive() || c.isInterface()) {
                 continue;
