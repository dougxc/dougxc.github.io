--- old/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp	2018-11-01 11:13:08.000000000 +0100
+++ new/src/hotspot/share/jvmci/jvmciCodeInstaller.cpp	2018-11-01 11:13:07.000000000 +0100
@@ -471,7 +471,16 @@
     Handle object(THREAD, values->obj_at(i));
     Handle slot_kind (THREAD, slotKinds->obj_at(i));
     BasicType type = JVMCIRuntime::kindToBasicType(slot_kind, CHECK);
-    ScopeValue* value = get_scope_value(object, type, objects, cur_second, CHECK);
+    ScopeValue* value;
+    if (object == Value::ILLEGAL()) {
+      // no value needs to be written
+      value = _illegal_value;
+      if (type == T_DOUBLE || type == T_LONG) {
+        cur_second = _illegal_value;
+      }
+    } else {
+      value = get_scope_value(object, type, objects, cur_second, CHECK);
+    }
 
     if (isLongArray && cur_second == NULL) {
       // we're trying to put ints into a long array... this isn't really valid, but it's used for some optimizations.
@@ -1011,9 +1020,17 @@
     HandleMark hm(THREAD);
     Handle value(THREAD, virtualObjects->obj_at(i));
     int id = VirtualObject::id(value);
+    Handle base_object(THREAD, VirtualObject::baseObject(value));
     Handle type(THREAD, VirtualObject::type(value));
     oop javaMirror = HotSpotResolvedObjectTypeImpl::javaClass(type);
-    ObjectValue* sv = new ObjectValue(id, new ConstantOopWriteValue(JNIHandles::make_local(Thread::current(), javaMirror)));
+    ScopeValue* baseObjectValue;
+    if (base_object.is_null()) {
+      baseObjectValue = _oop_null_scope_value;
+    } else {
+      ScopeValue* second = NULL;
+      baseObjectValue = get_scope_value(base_object, T_OBJECT, objects, second, CHECK_NULL);
+    }
+    ObjectValue* sv = new ObjectValue(id, new ConstantOopWriteValue(JNIHandles::make_local(Thread::current(), javaMirror)), baseObjectValue);
     if (id < 0 || id >= objects->length()) {
       JVMCI_ERROR_NULL("virtual object id %d out of bounds", id);
     }
