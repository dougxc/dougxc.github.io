--- old/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/gen/DebugInfoBuilder.java	2018-11-01 11:13:15.000000000 +0100
+++ new/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/gen/DebugInfoBuilder.java	2018-11-01 11:13:15.000000000 +0100
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2018 Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -92,6 +92,10 @@
                         if (!(state instanceof MaterializedObjectState) || ((MaterializedObjectState) state).materializedValue() != state.object()) {
                             objectStates.put(state.object(), state);
                         }
+                        if (state.object().baseObject() != null) {
+                            virtualObjects.put(state.object(), VirtualObject.get(state.object().type(), toJavaValue(state.object().baseObject()), virtualObjects.size()));
+                            pendingVirtualObjects.add(state.object());
+                        }
                     }
                 }
             }
@@ -126,7 +130,7 @@
                         ValueNode value = currentField.values().get(i);
                         if (value == null) {
                             JavaKind entryKind = vobjNode.entryKind(i);
-                            values[pos] = JavaConstant.defaultForKind(entryKind.getStackKind());
+                            values[pos] = vobjNode.baseObject() != null ? Value.ILLEGAL : JavaConstant.defaultForKind(entryKind.getStackKind());
                             slotKinds[pos] = entryKind.getStackKind();
                             pos++;
                         } else if (!value.isConstant() || value.asJavaConstant().getJavaKind() != JavaKind.Illegal) {
