--- old/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/LIRFrameState.java	2018-11-01 11:13:17.000000000 +0100
+++ new/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/LIRFrameState.java	2018-11-01 11:13:16.000000000 +0100
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -88,6 +88,9 @@
         if (virtualObjects != null) {
             for (VirtualObject obj : virtualObjects) {
                 processValues(inst, obj.getValues(), proc);
+                if (obj.getBaseObject() != null) {
+                    obj.setBaseObject(processValue(inst, obj.getBaseObject(), proc));
+                }
             }
         }
         if (liveBasePointers != null) {
@@ -107,6 +110,9 @@
         if (virtualObjects != null) {
             for (VirtualObject obj : virtualObjects) {
                 visitValues(inst, obj.getValues(), proc);
+                if (obj.getBaseObject() != null) {
+                    visitValue(inst, obj.getBaseObject(), proc);
+                }
             }
         }
         if (liveBasePointers != null) {
@@ -122,52 +128,59 @@
 
     protected void processValues(LIRInstruction inst, JavaValue[] values, InstructionValueProcedure proc) {
         for (int i = 0; i < values.length; i++) {
-            JavaValue value = values[i];
-            if (isIllegalJavaValue(value)) {
-                continue;
-            }
-            if (value instanceof AllocatableValue) {
-                AllocatableValue allocatable = (AllocatableValue) value;
-                Value result = proc.doValue(inst, allocatable, OperandMode.ALIVE, STATE_FLAGS);
-                if (!allocatable.identityEquals(result)) {
-                    values[i] = (JavaValue) result;
-                }
-            } else if (value instanceof StackLockValue) {
-                StackLockValue monitor = (StackLockValue) value;
-                JavaValue owner = monitor.getOwner();
-                if (owner instanceof AllocatableValue) {
-                    monitor.setOwner((JavaValue) proc.doValue(inst, (AllocatableValue) owner, OperandMode.ALIVE, STATE_FLAGS));
-                }
-                Value slot = monitor.getSlot();
-                if (isVirtualStackSlot(slot)) {
-                    monitor.setSlot(asAllocatableValue(proc.doValue(inst, slot, OperandMode.ALIVE, STATE_FLAGS)));
-                }
-            } else {
-                assert unprocessed(value);
+            values[i] = processValue(inst, values[i], proc);
+        }
+    }
+
+    private JavaValue processValue(LIRInstruction inst, JavaValue value, InstructionValueProcedure proc) {
+        if (isIllegalJavaValue(value)) {
+            return value;
+        }
+        if (value instanceof AllocatableValue) {
+            AllocatableValue allocatable = (AllocatableValue) value;
+            Value result = proc.doValue(inst, allocatable, OperandMode.ALIVE, STATE_FLAGS);
+            if (!allocatable.identityEquals(result)) {
+                return (JavaValue) result;
+            }
+        } else if (value instanceof StackLockValue) {
+            StackLockValue monitor = (StackLockValue) value;
+            JavaValue owner = monitor.getOwner();
+            if (owner instanceof AllocatableValue) {
+                monitor.setOwner((JavaValue) proc.doValue(inst, (AllocatableValue) owner, OperandMode.ALIVE, STATE_FLAGS));
             }
+            Value slot = monitor.getSlot();
+            if (isVirtualStackSlot(slot)) {
+                monitor.setSlot(asAllocatableValue(proc.doValue(inst, slot, OperandMode.ALIVE, STATE_FLAGS)));
+            }
+        } else {
+            assert unprocessed(value);
         }
+        return value;
     }
 
     protected void visitValues(LIRInstruction inst, JavaValue[] values, InstructionValueConsumer proc) {
         for (int i = 0; i < values.length; i++) {
-            JavaValue value = values[i];
-            if (isIllegalJavaValue(value)) {
-                continue;
-            } else if (value instanceof AllocatableValue) {
-                proc.visitValue(inst, (AllocatableValue) value, OperandMode.ALIVE, STATE_FLAGS);
-            } else if (value instanceof StackLockValue) {
-                StackLockValue monitor = (StackLockValue) value;
-                JavaValue owner = monitor.getOwner();
-                if (owner instanceof AllocatableValue) {
-                    proc.visitValue(inst, (AllocatableValue) owner, OperandMode.ALIVE, STATE_FLAGS);
-                }
-                Value slot = monitor.getSlot();
-                if (isVirtualStackSlot(slot)) {
-                    proc.visitValue(inst, slot, OperandMode.ALIVE, STATE_FLAGS);
-                }
-            } else {
-                assert unprocessed(value);
+            visitValue(inst, values[i], proc);
+        }
+    }
+
+    private void visitValue(LIRInstruction inst, JavaValue value, InstructionValueConsumer proc) {
+        if (isIllegalJavaValue(value)) {
+            return;
+        } else if (value instanceof AllocatableValue) {
+            proc.visitValue(inst, (AllocatableValue) value, OperandMode.ALIVE, STATE_FLAGS);
+        } else if (value instanceof StackLockValue) {
+            StackLockValue monitor = (StackLockValue) value;
+            JavaValue owner = monitor.getOwner();
+            if (owner instanceof AllocatableValue) {
+                proc.visitValue(inst, (AllocatableValue) owner, OperandMode.ALIVE, STATE_FLAGS);
             }
+            Value slot = monitor.getSlot();
+            if (isVirtualStackSlot(slot)) {
+                proc.visitValue(inst, slot, OperandMode.ALIVE, STATE_FLAGS);
+            }
+        } else {
+            assert unprocessed(value);
         }
     }
 
