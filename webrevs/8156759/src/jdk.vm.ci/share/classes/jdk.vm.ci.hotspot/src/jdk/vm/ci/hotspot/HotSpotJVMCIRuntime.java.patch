--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java	2016-05-12 09:40:41.000000000 +0200
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotJVMCIRuntime.java	2016-05-12 09:40:41.000000000 +0200
@@ -37,11 +37,11 @@
 import java.util.Objects;
 import java.util.TreeMap;
 
+import jdk.internal.misc.VM;
 import jdk.vm.ci.code.Architecture;
 import jdk.vm.ci.code.CompilationRequestResult;
 import jdk.vm.ci.code.CompiledCode;
 import jdk.vm.ci.code.InstalledCode;
-import jdk.vm.ci.common.JVMCIError;
 import jdk.vm.ci.hotspot.services.HotSpotJVMCICompilerFactory;
 import jdk.vm.ci.hotspot.services.HotSpotVMEventListener;
 import jdk.vm.ci.inittimer.InitTimer;
@@ -55,7 +55,6 @@
 import jdk.vm.ci.runtime.JVMCICompiler;
 import jdk.vm.ci.runtime.services.JVMCICompilerFactory;
 import jdk.vm.ci.services.Services;
-import jdk.internal.misc.VM;
 
 //JaCoCo Exclude
 
@@ -141,7 +140,7 @@
                     } else if (type == String.class) {
                         this.value = propertyValue;
                     } else {
-                        throw new JVMCIError("Unexpected option type " + type);
+                        throw new InternalError("Unexpected option type " + type);
                     }
                     this.isDefault = false;
                 }
@@ -191,7 +190,7 @@
             }
         }
 
-        throw new JVMCIError("No JVMCI runtime available for the %s architecture", architecture);
+        throw new InternalError(String.format("No JVMCI runtime available for the %s architecture", architecture));
     }
 
     /**
