--- old/test/compiler/jvmci/errors/TestInvalidCompilationResult.java	2016-05-12 09:40:50.000000000 +0200
+++ new/test/compiler/jvmci/errors/TestInvalidCompilationResult.java	2016-05-12 09:40:50.000000000 +0200
@@ -29,7 +29,6 @@
  *          jdk.vm.ci/jdk.vm.ci.code.site
  *          jdk.vm.ci/jdk.vm.ci.meta
  *          jdk.vm.ci/jdk.vm.ci.runtime
- *          jdk.vm.ci/jdk.vm.ci.common
  * @compile CodeInstallerTest.java
  * @build compiler.jvmci.errors.TestInvalidCompilationResult
  * @run junit/othervm -da:jdk.vm.ci... -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI compiler.jvmci.errors.TestInvalidCompilationResult
@@ -46,7 +45,6 @@
 import jdk.vm.ci.code.site.Mark;
 import jdk.vm.ci.code.site.Reference;
 import jdk.vm.ci.code.site.Site;
-import jdk.vm.ci.common.JVMCIError;
 import jdk.vm.ci.hotspot.HotSpotCompiledCode.Comment;
 import jdk.vm.ci.hotspot.HotSpotConstant;
 import jdk.vm.ci.meta.Assumptions.Assumption;
@@ -86,12 +84,12 @@
         }
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidAssumption() {
         installEmptyCode(new Site[0], new Assumption[]{new InvalidAssumption()}, new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidAlignment() {
         installEmptyCode(new Site[0], new Assumption[0], new Comment[0], 7, new DataPatch[0], null);
     }
@@ -106,14 +104,14 @@
         installEmptyCode(new Site[0], new Assumption[0], new Comment[0], 16, new DataPatch[]{new DataPatch(0, null)}, null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidDataSectionReference() {
         DataSectionReference ref = new DataSectionReference();
         ref.setOffset(0);
         installEmptyCode(new Site[0], new Assumption[0], new Comment[0], 16, new DataPatch[]{new DataPatch(0, ref)}, null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidNarrowMethodInDataSection() {
         HotSpotConstant c = (HotSpotConstant) dummyMethod.getEncoding();
         ConstantReference ref = new ConstantReference((VMConstant) c.compress());
@@ -126,7 +124,7 @@
         installEmptyCode(new Site[0], new Assumption[0], new Comment[0], 16, new DataPatch[]{new DataPatch(0, ref)}, null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidConstantInDataSection() {
         ConstantReference ref = new ConstantReference(new InvalidVMConstant());
         installEmptyCode(new Site[0], new Assumption[0], new Comment[0], 16, new DataPatch[]{new DataPatch(0, ref)}, null);
@@ -143,31 +141,31 @@
         installEmptyCode(new Site[]{new DataPatch(0, ref)}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidConstantInCode() {
         ConstantReference ref = new ConstantReference(new InvalidVMConstant());
         installEmptyCode(new Site[]{new DataPatch(0, ref)}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidReference() {
         InvalidReference ref = new InvalidReference();
         installEmptyCode(new Site[]{new DataPatch(0, ref)}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testOutOfBoundsDataSectionReference() {
         DataSectionReference ref = new DataSectionReference();
         ref.setOffset(0x1000);
         installEmptyCode(new Site[]{new DataPatch(0, ref)}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidMark() {
         installEmptyCode(new Site[]{new Mark(0, new Object())}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidMarkInt() {
         installEmptyCode(new Site[]{new Mark(0, -1)}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
@@ -177,20 +175,20 @@
         installEmptyCode(new Site[]{null}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInfopointMissingDebugInfo() {
         Infopoint info = new Infopoint(0, null, InfopointReason.METHOD_START);
         installEmptyCode(new Site[]{info}, new Assumption[0], new Comment[0], 16, new DataPatch[0], null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testSafepointMissingDebugInfo() {
         Infopoint info = new Infopoint(0, null, InfopointReason.SAFEPOINT);
         StackSlot deoptRescueSlot = StackSlot.get(null, 0, true);
         installEmptyCode(new Site[]{info}, new Assumption[0], new Comment[0], 16, new DataPatch[0], deoptRescueSlot);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidDeoptRescueSlot() {
         StackSlot deoptRescueSlot = StackSlot.get(null, -1, false);
         installEmptyCode(new Site[]{}, new Assumption[0], new Comment[0], 16, new DataPatch[0], deoptRescueSlot);
