--- old/test/compiler/jvmci/errors/TestInvalidDebugInfo.java	2016-05-12 09:40:51.000000000 +0200
+++ new/test/compiler/jvmci/errors/TestInvalidDebugInfo.java	2016-05-12 09:40:51.000000000 +0200
@@ -29,7 +29,6 @@
  *          jdk.vm.ci/jdk.vm.ci.code.site
  *          jdk.vm.ci/jdk.vm.ci.meta
  *          jdk.vm.ci/jdk.vm.ci.runtime
- *          jdk.vm.ci/jdk.vm.ci.common
  * @compile CodeInstallerTest.java
  * @run junit/othervm -da:jdk.vm.ci... -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI compiler.jvmci.errors.TestInvalidDebugInfo
  */
@@ -46,7 +45,6 @@
 import jdk.vm.ci.code.site.Infopoint;
 import jdk.vm.ci.code.site.InfopointReason;
 import jdk.vm.ci.code.site.Site;
-import jdk.vm.ci.common.JVMCIError;
 import jdk.vm.ci.hotspot.HotSpotCompiledCode.Comment;
 import jdk.vm.ci.hotspot.HotSpotReferenceMap;
 import jdk.vm.ci.meta.Assumptions.Assumption;
@@ -92,17 +90,17 @@
         test(new JavaValue[0], null, 0, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testMissingDeoptRescueSlot() {
         test(null, new JavaValue[0], new JavaKind[0], 0, 0, 0, null);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedScopeValuesLength() {
         test(new JavaValue[]{JavaConstant.FALSE}, new JavaKind[0], 0, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedScopeSlotKindsLength() {
         test(new JavaValue[0], new JavaKind[]{JavaKind.Boolean}, 0, 0, 0);
     }
@@ -122,67 +120,67 @@
         test(new JavaValue[]{null}, new JavaKind[0], 0, 0, 1);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testWrongMonitorType() {
         test(new JavaValue[]{JavaConstant.INT_0}, new JavaKind[0], 0, 0, 1);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedIllegalValue() {
         test(new JavaValue[]{Value.ILLEGAL}, new JavaKind[]{JavaKind.Int}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedTypeInCPURegister() {
         Register reg = getRegister(arch.getPlatformKind(JavaKind.Int), 0);
         test(new JavaValue[]{reg.asValue()}, new JavaKind[]{JavaKind.Illegal}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedTypeInFloatRegister() {
         Register reg = getRegister(arch.getPlatformKind(JavaKind.Float), 0);
         test(new JavaValue[]{reg.asValue()}, new JavaKind[]{JavaKind.Illegal}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedTypeOnStack() {
         LIRKind kind = codeCache.getTarget().getLIRKind(JavaKind.Int);
         StackSlot value = StackSlot.get(kind, 8, false);
         test(new JavaValue[]{value}, new JavaKind[]{JavaKind.Illegal}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testWrongConstantType() {
         test(new JavaValue[]{JavaConstant.INT_0}, new JavaKind[]{JavaKind.Object}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnsupportedConstantType() {
         test(new JavaValue[]{JavaConstant.forShort((short) 0)}, new JavaKind[]{JavaKind.Short}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedNull() {
         test(new JavaValue[]{JavaConstant.NULL_POINTER}, new JavaKind[]{JavaKind.Int}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedObject() {
         JavaValue wrapped = constantReflection.forObject(this);
         test(new JavaValue[]{wrapped}, new JavaKind[]{JavaKind.Int}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnknownJavaValue() {
         test(new JavaValue[]{new UnknownJavaValue()}, new JavaKind[]{JavaKind.Int}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testMissingIllegalAfterDouble() {
         test(new JavaValue[]{JavaConstant.DOUBLE_0, JavaConstant.INT_0}, new JavaKind[]{JavaKind.Double, JavaKind.Int}, 2, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testInvalidVirtualObjectId() {
         ResolvedJavaType obj = metaAccess.lookupJavaType(Object.class);
         VirtualObject o = VirtualObject.get(obj, 5);
@@ -191,7 +189,7 @@
         test(new VirtualObject[]{o}, new JavaValue[0], new JavaKind[0], 0, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testDuplicateVirtualObject() {
         ResolvedJavaType obj = metaAccess.lookupJavaType(Object.class);
         VirtualObject o1 = VirtualObject.get(obj, 0);
@@ -203,7 +201,7 @@
         test(new VirtualObject[]{o1, o2}, new JavaValue[0], new JavaKind[0], 0, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUnexpectedVirtualObject() {
         ResolvedJavaType obj = metaAccess.lookupJavaType(Object.class);
         VirtualObject o = VirtualObject.get(obj, 0);
@@ -212,7 +210,7 @@
         test(new VirtualObject[]{o}, new JavaValue[]{o}, new JavaKind[]{JavaKind.Int}, 1, 0, 0);
     }
 
-    @Test(expected = JVMCIError.class)
+    @Test(expected = InternalError.class)
     public void testUndefinedVirtualObject() {
         ResolvedJavaType obj = metaAccess.lookupJavaType(Object.class);
         VirtualObject o0 = VirtualObject.get(obj, 0);
