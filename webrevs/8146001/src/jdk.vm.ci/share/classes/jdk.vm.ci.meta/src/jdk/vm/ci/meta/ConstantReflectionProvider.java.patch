--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.meta/src/jdk/vm/ci/meta/ConstantReflectionProvider.java	2015-12-22 15:26:57.000000000 +0100
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.meta/src/jdk/vm/ci/meta/ConstantReflectionProvider.java	2015-12-22 15:26:57.000000000 +0100
@@ -80,29 +80,31 @@
      * @return the constant value of this field or {@code null} if this field is not considered
      *         constant by the runtime
      */
-    JavaConstant readConstantFieldValue(JavaField field, JavaConstant receiver);
+    JavaConstant readConstantFieldValue(ResolvedJavaField field, JavaConstant receiver);
 
     /**
      * Gets the current value of this field for a given object, if available.
      *
      * There is no guarantee that the same value will be returned by this method for a field unless
-     * the field is considered to be {@linkplain #readConstantFieldValue(JavaField, JavaConstant)
-     * constant} by the runtime.
+     * the field is considered to be
+     * {@linkplain #readConstantFieldValue(ResolvedJavaField, JavaConstant) constant} by the
+     * runtime.
      *
      * @param receiver object from which this field's value is to be read. This value is ignored if
      *            this field is static.
      * @return the value of this field or {@code null} if the value is not available (e.g., because
      *         the field holder is not yet initialized).
      */
-    JavaConstant readFieldValue(JavaField field, JavaConstant receiver);
+    JavaConstant readFieldValue(ResolvedJavaField field, JavaConstant receiver);
 
     /**
      * Gets the current value of this field for a given object, if available. Like
-     * {@link #readFieldValue(JavaField, JavaConstant)} but treats array fields as stable.
+     * {@link #readFieldValue(ResolvedJavaField, JavaConstant)} but treats array fields as stable.
      *
      * There is no guarantee that the same value will be returned by this method for a field unless
-     * the field is considered to be {@linkplain #readConstantFieldValue(JavaField, JavaConstant)
-     * constant} by the runtime.
+     * the field is considered to be
+     * {@linkplain #readConstantFieldValue(ResolvedJavaField, JavaConstant) constant} by the
+     * runtime.
      *
      * @param receiver object from which this field's value is to be read. This value is ignored if
      *            this field is static.
@@ -110,7 +112,7 @@
      * @return the value of this field or {@code null} if the value is not available (e.g., because
      *         the field holder is not yet initialized).
      */
-    JavaConstant readStableFieldValue(JavaField field, JavaConstant receiver, boolean isDefaultStable);
+    JavaConstant readStableFieldValue(ResolvedJavaField field, JavaConstant receiver, boolean isDefaultStable);
 
     /**
      * Converts the given {@link JavaKind#isPrimitive() primitive} constant to a boxed
