--- old/src/hotspot/share/jvmci/jvmciCompilerToVM.cpp	2017-11-03 16:52:58.000000000 +0100
+++ new/src/hotspot/share/jvmci/jvmciCompilerToVM.cpp	2017-11-03 16:52:57.000000000 +0100
@@ -1000,7 +1000,7 @@
   return -1;
 C2V_END
 
-C2V_VMENTRY(void, setNotInlineableOrCompileable,(JNIEnv *, jobject,  jobject jvmci_method))
+C2V_VMENTRY(void, setNotInlinableOrCompilable,(JNIEnv *, jobject,  jobject jvmci_method))
   methodHandle method = CompilerToVM::asMethod(jvmci_method);
   method->set_not_c1_compilable();
   method->set_not_c2_compilable();
@@ -1820,7 +1820,7 @@
   {CC "getImplementor",                               CC "(" HS_RESOLVED_KLASS ")" HS_RESOLVED_KLASS,                                       FN_PTR(getImplementor)},
   {CC "getStackTraceElement",                         CC "(" HS_RESOLVED_METHOD "I)" STACK_TRACE_ELEMENT,                                   FN_PTR(getStackTraceElement)},
   {CC "methodIsIgnoredBySecurityStackWalk",           CC "(" HS_RESOLVED_METHOD ")Z",                                                       FN_PTR(methodIsIgnoredBySecurityStackWalk)},
-  {CC "setNotInlineableOrCompileable",                CC "(" HS_RESOLVED_METHOD ")V",                                                       FN_PTR(setNotInlineableOrCompileable)},
+  {CC "setNotInlinableOrCompilable",                  CC "(" HS_RESOLVED_METHOD ")V",                                                       FN_PTR(setNotInlinableOrCompilable)},
   {CC "isCompilable",                                 CC "(" HS_RESOLVED_METHOD ")Z",                                                       FN_PTR(isCompilable)},
   {CC "hasNeverInlineDirective",                      CC "(" HS_RESOLVED_METHOD ")Z",                                                       FN_PTR(hasNeverInlineDirective)},
   {CC "shouldInlineMethod",                           CC "(" HS_RESOLVED_METHOD ")Z",                                                       FN_PTR(shouldInlineMethod)},
--- old/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/CompilerToVM.java	2017-11-03 16:52:59.000000000 +0100
+++ new/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/CompilerToVM.java	2017-11-03 16:52:58.000000000 +0100
@@ -470,7 +470,7 @@
     /**
      * Sets flags on {@code method} indicating that it should never be inlined or compiled by the VM.
      */
-    native void setNotInlineableOrCompileable(HotSpotResolvedJavaMethodImpl method);
+    native void setNotInlinableOrCompilable(HotSpotResolvedJavaMethodImpl method);
 
     /**
      * Invalidates the profiling information for {@code method} and (re)initializes it such that
--- old/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethod.java	2017-11-03 16:52:59.000000000 +0100
+++ new/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethod.java	2017-11-03 16:52:59.000000000 +0100
@@ -59,7 +59,7 @@
     /**
      * Sets flags on {@code method} indicating that it should never be inlined or compiled by the VM.
      */
-    void setNotInlineableOrCompileable();
+    void setNotInlinableOrCompilable();
 
     /**
      * Returns true if this method is one of the special methods that is ignored by security stack
--- old/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java	2017-11-03 16:53:00.000000000 +0100
+++ new/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaMethodImpl.java	2017-11-03 16:53:00.000000000 +0100
@@ -320,8 +320,8 @@
     /**
      * Sets flags on {@code method} indicating that it should never be inlined or compiled by the VM.
      */
-    public void setNotInlineableOrCompileable() {
-        compilerToVM().setNotInlineableOrCompileable(this);
+    public void setNotInlinableOrCompilable() {
+        compilerToVM().setNotInlinableOrCompilable(this);
     }
 
     /**
--- old/test/hotspot/jtreg/compiler/jvmci/common/patches/jdk.internal.vm.ci/jdk/vm/ci/hotspot/CompilerToVMHelper.java	2017-11-03 16:53:01.000000000 +0100
+++ new/test/hotspot/jtreg/compiler/jvmci/common/patches/jdk.internal.vm.ci/jdk/vm/ci/hotspot/CompilerToVMHelper.java	2017-11-03 16:53:01.000000000 +0100
@@ -224,8 +224,8 @@
         return CTVM.getLocalVariableTableStart((HotSpotResolvedJavaMethodImpl)method);
     }
 
-    public static void setNotInlineableOrCompileable(HotSpotResolvedJavaMethod method) {
-        CTVM.setNotInlineableOrCompileable((HotSpotResolvedJavaMethodImpl)method);
+    public static void setNotInlinableOrCompilable(HotSpotResolvedJavaMethod method) {
+        CTVM.setNotInlinableOrCompilable((HotSpotResolvedJavaMethodImpl)method);
     }
 
     public static void reprofile(HotSpotResolvedJavaMethod method) {
--- old/test/hotspot/jtreg/compiler/jvmci/compilerToVM/DoNotInlineOrCompileTest.java	2017-11-03 16:53:02.000000000 +0100
+++ new/test/hotspot/jtreg/compiler/jvmci/compilerToVM/DoNotInlineOrCompileTest.java	2017-11-03 16:53:02.000000000 +0100
@@ -71,10 +71,10 @@
         boolean hasNeverInlineDirective = CompilerToVMHelper.hasNeverInlineDirective(method);
         Asserts.assertFalse(hasNeverInlineDirective, "Unexpected initial " +
                 "value of property 'hasNeverInlineDirective'");
-        CompilerToVMHelper.setNotInlineableOrCompileable(method);
+        CompilerToVMHelper.setNotInlinableOrCompilable(method);
         hasNeverInlineDirective = CompilerToVMHelper.hasNeverInlineDirective(method);
         Asserts.assertTrue(hasNeverInlineDirective, aMethod
-                + " : hasNeverInlineDirective is false even after setNotInlineableOrCompileable'");
+                + " : hasNeverInlineDirective is false even after setNotInlinableOrCompilable'");
     }
 
     private static List<Executable> createTestCases() {
