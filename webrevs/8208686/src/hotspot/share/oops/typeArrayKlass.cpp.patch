--- old/src/hotspot/share/oops/typeArrayKlass.cpp	2018-09-26 14:03:54.000000000 +0200
+++ new/src/hotspot/share/oops/typeArrayKlass.cpp	2018-09-26 14:03:53.000000000 +0200
@@ -100,15 +100,10 @@
 typeArrayOop TypeArrayKlass::allocate_common(int length, bool do_zero, TRAPS) {
   assert(log2_element_size() >= 0, "bad scale");
   if (length >= 0) {
-    if (length <= max_length()) {
-      size_t size = typeArrayOopDesc::object_size(layout_helper(), length);
-      return (typeArrayOop)Universe::heap()->array_allocate(this, (int)size, length,
-                                                            do_zero, CHECK_NULL);
-    } else {
-      report_java_out_of_memory("Requested array size exceeds VM limit");
-      JvmtiExport::post_array_size_exhausted();
-      THROW_OOP_0(Universe::out_of_memory_error_array_size());
-    }
+    check_array_allocation_length(length, max_length(), CHECK_NULL);
+    size_t size = typeArrayOopDesc::object_size(layout_helper(), length);
+    return (typeArrayOop)Universe::heap()->array_allocate(this, (int)size, length,
+                                                          do_zero, CHECK_NULL);
   } else {
     THROW_MSG_0(vmSymbols::java_lang_NegativeArraySizeException(), err_msg("%d", length));
   }
