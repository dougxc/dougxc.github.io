--- old/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ArrayIndexOfOp.java	2019-01-10 15:46:56.000000000 +0100
+++ new/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.amd64/src/org/graalvm/compiler/lir/amd64/AMD64ArrayIndexOfOp.java	2019-01-10 15:46:56.000000000 +0100
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -20,8 +20,6 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-
-
 package org.graalvm.compiler.lir.amd64;
 
 import jdk.vm.ci.amd64.AMD64;
@@ -220,6 +218,7 @@
         };
         Label lessThanVectorSizeRemaining = new Label();
         Label lessThanVectorSizeRemainingLoop = new Label();
+        Label lessThanVectorSizeRemainingLoopBegin = new Label();
         Label bulkVectorLoopExit = nVectors == 1 ? lessThanVectorSizeRemaining : singleVectorLoop;
         int bytesPerVector = vectorSize.getBytes();
         int arraySlotsPerVector = vectorSize.getBytes() / kind.getByteCount();
@@ -315,7 +314,7 @@
         asm.andl(tmpArrayPtrLow, (vmPageSize - 1));
         asm.cmpl(tmpArrayPtrLow, (vmPageSize - (findTwoCharPrefix ? bytesPerVector + kind.getByteCount() : bytesPerVector)));
         // if the page boundary would be crossed, do byte/character-wise comparison instead.
-        asm.jccb(AMD64Assembler.ConditionFlag.Above, lessThanVectorSizeRemainingLoop);
+        asm.jccb(AMD64Assembler.ConditionFlag.Above, lessThanVectorSizeRemainingLoopBegin);
 
         Label[] overBoundsMatch = {new Label(), new Label()};
         // otherwise, do a vector compare that reads beyond array bounds
@@ -362,6 +361,12 @@
         // match is in bounds, return offset
         asm.jmp(retFound);
 
+        asm.bind(lessThanVectorSizeRemainingLoopBegin);
+        if (!(charMode(kind) && findTwoCharPrefix)) {
+            for (int i = 0; i < nValues; i++) {
+                asm.andl(searchValue[i], byteMode(kind) && !findTwoCharPrefix ? 0xff : 0xffff);
+            }
+        }
         // compare remaining slots in the array one-by-one
         asm.bind(lessThanVectorSizeRemainingLoop);
         // check if enough array slots remain
