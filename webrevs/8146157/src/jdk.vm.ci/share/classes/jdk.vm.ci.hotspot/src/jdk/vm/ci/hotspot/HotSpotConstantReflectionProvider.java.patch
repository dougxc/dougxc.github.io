--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotConstantReflectionProvider.java	2015-12-26 16:48:25.000000000 +0100
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotConstantReflectionProvider.java	2015-12-26 16:48:25.000000000 +0100
@@ -242,7 +242,7 @@
      * {@link #readConstantFieldValue(JavaField, JavaConstant)}.
      */
     protected boolean isStaticFieldConstant(HotSpotResolvedJavaField staticField) {
-        if (staticField.isFinal() || staticField.isStable()) {
+        if (staticField.isFinal() || (staticField.isStable() && runtime.getConfig().foldStableValues)) {
             ResolvedJavaType holder = staticField.getDeclaringClass();
             if (holder.isInitialized() && !holder.getName().equals(SystemClassName)) {
                 return true;
@@ -312,7 +312,7 @@
                             return value;
                         }
                     }
-                } else if (hotspotField.isStable()) {
+                } else if (hotspotField.isStable() && runtime.getConfig().foldStableValues) {
                     if (hotspotField.isInObject(object)) {
                         JavaConstant value = readFieldValue(field, receiver);
                         if (isStableInstanceFieldValueConstant(value, object.getClass())) {
@@ -337,8 +337,10 @@
         HotSpotResolvedJavaField hotspotField = (HotSpotResolvedJavaField) field;
         if (!hotspotField.isStable()) {
             return readNonStableFieldValue(field, receiver);
-        } else {
+        } else if (runtime.getConfig().foldStableValues) {
             return readStableFieldValue(field, receiver, hotspotField.isDefaultStable());
+        } else {
+            return null;
         }
     }
 
