--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotConstantReflectionProvider.java	2015-12-26 16:48:25.000000000 +0100
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotConstantReflectionProvider.java	2015-12-26 16:48:25.000000000 +0100
@@ -242,7 +242,7 @@
      * {@link #readConstantFieldValue(JavaField, JavaConstant)}.
      */
     protected boolean isStaticFieldConstant(HotSpotResolvedJavaField staticField) {
-        if (staticField.isFinal() || staticField.isStable()) {
+        if (staticField.isFinal() || (staticField.isStable() && runtime.getConfig().foldStableValues)) {
             ResolvedJavaType holder = staticField.getDeclaringClass();
             if (holder.isInitialized() && !holder.getName().equals(SystemClassName)) {
                 return true;
@@ -312,7 +312,7 @@
                             return value;
                         }
                     }
-                } else if (hotspotField.isStable()) {
+                } else if (hotspotField.isStable() && runtime.getConfig().foldStableValues) {
                     if (hotspotField.isInObject(object)) {
                         JavaConstant value = readFieldValue(field, receiver);
                         if (isStableInstanceFieldValueConstant(value, object.getClass())) {
@@ -337,8 +337,10 @@
         HotSpotResolvedJavaField hotspotField = (HotSpotResolvedJavaField) field;
         if (!hotspotField.isStable()) {
             return readNonStableFieldValue(field, receiver);
-        } else {
+        } else if (runtime.getConfig().foldStableValues) {
             return readStableFieldValue(field, receiver, hotspotField.isDefaultStable());
+        } else {
+            return null;
         }
     }
 
--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaField.java	2015-12-26 16:48:26.000000000 +0100
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotResolvedJavaField.java	2015-12-26 16:48:26.000000000 +0100
@@ -40,17 +40,14 @@
     int offset();
 
     /**
-     * Checks if this field has the {@link Stable} annotation.
-     *
-     * @return true if field has {@link Stable} annotation, false otherwise
+     * Determines if this field should be treated as a constant.
      */
     boolean isStable();
 
     /**
-     * If this field is stable, checks if default values (0, null, etc.) should be considered stable
-     * as well.
-     *
-     * @return true if default values should be considered stable, false otherwise
+     * Determines if this field should be considered constant if it has the default value for its
+     * type (e.g, 0, null, etc.). This result of this method is undefined if this field is not
+     * {@linkplain #isStable() stable}.
      */
     boolean isDefaultStable();
 }
--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotVMConfig.java	2015-12-26 16:48:27.000000000 +0100
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotVMConfig.java	2015-12-26 16:48:27.000000000 +0100
@@ -853,6 +853,7 @@
     @HotSpotVMFlag(name = "JVMCIUseFastLocking") @Stable public boolean useFastLocking;
     @HotSpotVMFlag(name = "ForceUnreachable") @Stable public boolean forceUnreachable;
     @HotSpotVMFlag(name = "CodeCacheSegmentSize") @Stable public int codeSegmentSize;
+    @HotSpotVMFlag(name = "FoldStableValues") @Stable public boolean foldStableValues;
 
     @HotSpotVMFlag(name = "UseTLAB") @Stable public boolean useTLAB;
     @HotSpotVMFlag(name = "UseBiasedLocking") @Stable public boolean useBiasedLocking;
@@ -1683,6 +1684,7 @@
     @HotSpotVMConstant(name = "ArrayData::array_len_off_set") @Stable public int arrayDataArrayLenOffset;
     @HotSpotVMConstant(name = "ArrayData::array_start_off_set") @Stable public int arrayDataArrayStartOffset;
     @HotSpotVMConstant(name = "MultiBranchData::per_case_cell_count") @Stable public int multiBranchDataPerCaseCellCount;
+
     // Checkstyle: resume
 
     private boolean check() {
