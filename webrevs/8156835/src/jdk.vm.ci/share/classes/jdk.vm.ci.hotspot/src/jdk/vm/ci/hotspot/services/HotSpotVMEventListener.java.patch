--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/services/HotSpotVMEventListener.java	2016-05-18 23:02:10.000000000 +0200
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/services/HotSpotVMEventListener.java	2016-05-18 23:02:10.000000000 +0200
@@ -25,14 +25,10 @@
 import jdk.vm.ci.code.CompiledCode;
 import jdk.vm.ci.code.InstalledCode;
 import jdk.vm.ci.hotspot.HotSpotCodeCacheProvider;
-import jdk.vm.ci.hotspot.HotSpotJVMCIRuntime;
-import jdk.vm.ci.meta.JVMCIMetaAccessContext;
-import jdk.vm.ci.meta.ResolvedJavaType;
 import jdk.vm.ci.services.JVMCIPermission;
 
 /**
- * Service-provider class for responding to VM events and for creating
- * {@link JVMCIMetaAccessContext}s.
+ * Service-provider class for responding to VM events.
  */
 public abstract class HotSpotVMEventListener {
 
@@ -79,16 +75,4 @@
      */
     public void notifyBootstrapFinished() {
     }
-
-    /**
-     * Create a custom {@link JVMCIMetaAccessContext} to be used for managing the lifetime of loaded
-     * metadata. It a custom one isn't created then the default implementation will be a single
-     * context with globally shared instances of {@link ResolvedJavaType} that are never released.
-     *
-     * @param runtime the runtime instance that will use the returned context
-     * @return a custom context or null
-     */
-    public JVMCIMetaAccessContext createMetaAccessContext(HotSpotJVMCIRuntime runtime) {
-        return null;
-    }
 }
