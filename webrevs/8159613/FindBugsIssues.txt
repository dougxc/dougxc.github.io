M B Co: jdk.vm.ci.meta.AbstractProfiledItem.compareTo(AbstractProfiledItem) incorrectly handles double value  At AbstractProfiledItem.java:[line 58]
M B Se: jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl$OffsetComparator implements Comparator but not Serializable  At HotSpotResolvedObjectTypeImpl.java:[lines 1-664]
M V EI2: new jdk.vm.ci.meta.LocalVariableTable(Local[]) may expose internal representation by storing an externally mutable object into LocalVariableTable.locals  At LocalVariableTable.java:[line 33]
M V EI: jdk.vm.ci.meta.LocalVariableTable.getLocals() may expose internal representation by returning LocalVariableTable.locals  At LocalVariableTable.java:[line 51]
M V EI2: jdk.vm.ci.code.VirtualObject.setValues(JavaValue[], JavaKind[]) may expose internal representation by storing an externally mutable object into VirtualObject.values  At VirtualObject.java:[line 151]
M V EI: jdk.vm.ci.code.VirtualObject.getValues() may expose internal representation by returning VirtualObject.values  At VirtualObject.java:[line 125]
M V EI: jdk.vm.ci.code.VirtualObject.getSlotKinds() may expose internal representation by returning VirtualObject.slotKinds  At VirtualObject.java:[line 132]
M V EI2: jdk.vm.ci.code.VirtualObject.setValues(JavaValue[], JavaKind[]) may expose internal representation by storing an externally mutable object into VirtualObject.slotKinds  At VirtualObject.java:[line 152]
M V EI: jdk.vm.ci.meta.LineNumberTable.getLineNumberEntries() may expose internal representation by returning LineNumberTable.lineNumbers  At LineNumberTable.java:[line 36]
M V EI2: new jdk.vm.ci.meta.LineNumberTable(int[], int[]) may expose internal representation by storing an externally mutable object into LineNumberTable.lineNumbers  At LineNumberTable.java:[line 31]
M V EI2: new jdk.vm.ci.meta.LineNumberTable(int[], int[]) may expose internal representation by storing an externally mutable object into LineNumberTable.bci  At LineNumberTable.java:[line 32]
M V EI: jdk.vm.ci.meta.LineNumberTable.getBciEntries() may expose internal representation by returning LineNumberTable.bci  At LineNumberTable.java:[line 40]
M V EI2: new jdk.vm.ci.meta.AbstractJavaProfile(double, AbstractProfiledItem[]) may expose internal representation by storing an externally mutable object into AbstractJavaProfile.pitems  At AbstractJavaProfile.java:[line 41]
M V EI2: new jdk.vm.ci.code.DebugInfo(BytecodePosition, VirtualObject[]) may expose internal representation by storing an externally mutable object into DebugInfo.virtualObjectMapping  At DebugInfo.java:[line 55]
M V EI2: new jdk.vm.ci.hotspot.HotSpotReferenceMap(Location[], Location[], int[], int) may expose internal representation by storing an externally mutable object into HotSpotReferenceMap.objects  At HotSpotReferenceMap.java:[line 38]
M V EI2: new jdk.vm.ci.hotspot.HotSpotReferenceMap(Location[], Location[], int[], int) may expose internal representation by storing an externally mutable object into HotSpotReferenceMap.sizeInBytes  At HotSpotReferenceMap.java:[line 40]
M V EI2: new jdk.vm.ci.hotspot.HotSpotReferenceMap(Location[], Location[], int[], int) may expose internal representation by storing an externally mutable object into HotSpotReferenceMap.derivedBase  At HotSpotReferenceMap.java:[line 39]
M V EI2: new jdk.vm.ci.hotspot.HotSpotCompiledCode(String, byte[], int, Site[], Assumptions$Assumption[], ResolvedJavaMethod[], HotSpotCompiledCode$Comment[], byte[], int, DataPatch[], boolean, int, StackSlot) may expose internal representation by storing an externally mutable object into HotSpotCompiledCode.sites  At HotSpotCompiledCode.java:[line 123]
M V EI2: new jdk.vm.ci.hotspot.HotSpotCompiledCode(String, byte[], int, Site[], Assumptions$Assumption[], ResolvedJavaMethod[], HotSpotCompiledCode$Comment[], byte[], int, DataPatch[], boolean, int, StackSlot) may expose internal representation by storing an externally mutable object into HotSpotCompiledCode.targetCode  At HotSpotCompiledCode.java:[line 121]
M V EI2: new jdk.vm.ci.hotspot.HotSpotCompiledCode(String, byte[], int, Site[], Assumptions$Assumption[], ResolvedJavaMethod[], HotSpotCompiledCode$Comment[], byte[], int, DataPatch[], boolean, int, StackSlot) may expose internal representation by storing an externally mutable object into HotSpotCompiledCode.comments  At HotSpotCompiledCode.java:[line 127]
M V EI2: new jdk.vm.ci.hotspot.HotSpotCompiledCode(String, byte[], int, Site[], Assumptions$Assumption[], ResolvedJavaMethod[], HotSpotCompiledCode$Comment[], byte[], int, DataPatch[], boolean, int, StackSlot) may expose internal representation by storing an externally mutable object into HotSpotCompiledCode.methods  At HotSpotCompiledCode.java:[line 125]
M V EI2: new jdk.vm.ci.hotspot.HotSpotCompiledCode(String, byte[], int, Site[], Assumptions$Assumption[], ResolvedJavaMethod[], HotSpotCompiledCode$Comment[], byte[], int, DataPatch[], boolean, int, StackSlot) may expose internal representation by storing an externally mutable object into HotSpotCompiledCode.dataSection  At HotSpotCompiledCode.java:[line 128]
M V EI2: new jdk.vm.ci.hotspot.HotSpotCompiledCode(String, byte[], int, Site[], Assumptions$Assumption[], ResolvedJavaMethod[], HotSpotCompiledCode$Comment[], byte[], int, DataPatch[], boolean, int, StackSlot) may expose internal representation by storing an externally mutable object into HotSpotCompiledCode.dataSectionPatches  At HotSpotCompiledCode.java:[line 130]
M V EI2: new jdk.vm.ci.hotspot.HotSpotCompiledCode(String, byte[], int, Site[], Assumptions$Assumption[], ResolvedJavaMethod[], HotSpotCompiledCode$Comment[], byte[], int, DataPatch[], boolean, int, StackSlot) may expose internal representation by storing an externally mutable object into HotSpotCompiledCode.assumptions  At HotSpotCompiledCode.java:[line 124]
H D RCN: Redundant nullcheck of entry, which is known to be non-null in jdk.vm.ci.hotspot.HotSpotVMConfigAccess.getFieldOffset(String, Class, String, Object)  Redundant null check at HotSpotVMConfigAccess.java:[line 129]
H D RCN: Redundant nullcheck of entry, which is known to be non-null in jdk.vm.ci.hotspot.HotSpotVMConfigAccess.getFieldAddress(String, String, Long)  Redundant null check at HotSpotVMConfigAccess.java:[line 176]
M P Bx: Boxed value is unboxed and then immediately reboxed in jdk.vm.ci.hotspot.HotSpotVMConfigAccess.convertValue(String, Class, Object, String)  At HotSpotVMConfigAccess.java:[line 316]
M V EI: jdk.vm.ci.amd64.AMD64.getAvailableValueRegisters() may expose internal representation by returning AMD64.valueRegistersSSE  At AMD64.java:[line 252]
M V EI: jdk.vm.ci.amd64.AMD64.getAvailableValueRegisters() may expose internal representation by returning AMD64.valueRegistersAVX512  At AMD64.java:[line 250]
M B DE: jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.printConfig(HotSpotVMConfig, CompilerToVM) might ignore java.lang.Exception  At HotSpotJVMCIRuntime.java:[line 482]
M B Dm: new jdk.vm.ci.hotspot.HotSpotJVMCIRuntime() invokes System.exit(...), which shuts down the entire virtual machine  At HotSpotJVMCIRuntime.java:[line 271]
M D REC: Exception is caught when Exception is not thrown in jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.printConfig(HotSpotVMConfig, CompilerToVM)  At HotSpotJVMCIRuntime.java:[line 482]
H I Dm: Found reliance on default encoding in jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.printConfig(HotSpotVMConfig, CompilerToVM): String.getBytes()  At HotSpotJVMCIRuntime.java:[line 479]
M V EI: jdk.vm.ci.code.CallingConvention.getArguments() may expose internal representation by returning CallingConvention.argumentLocations  At CallingConvention.java:[line 105]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotVmSymbols.symbolAt(int)  At HotSpotVmSymbols.java:[line 46]
M V EI: jdk.vm.ci.hotspot.amd64.AMD64HotSpotRegisterConfig.getCallerSaveRegisters() may expose internal representation by returning AMD64HotSpotRegisterConfig.callerSaved  At AMD64HotSpotRegisterConfig.java:[line 174]
M V EI2: new jdk.vm.ci.hotspot.amd64.AMD64HotSpotRegisterConfig(TargetDescription, Register[], boolean) may expose internal representation by storing an externally mutable object into AMD64HotSpotRegisterConfig.allocatable  At AMD64HotSpotRegisterConfig.java:[line 160]
M V EI: jdk.vm.ci.hotspot.amd64.AMD64HotSpotRegisterConfig.getCallingConventionRegisters(CallingConvention$Type, JavaKind) may expose internal representation by returning AMD64HotSpotRegisterConfig.javaGeneralParameterRegisters  At AMD64HotSpotRegisterConfig.java:[line 209]
M V EI: jdk.vm.ci.hotspot.amd64.AMD64HotSpotRegisterConfig.getCallingConventionRegisters(CallingConvention$Type, JavaKind) may expose internal representation by returning AMD64HotSpotRegisterConfig.xmmParameterRegisters  At AMD64HotSpotRegisterConfig.java:[line 212]
M V EI: jdk.vm.ci.hotspot.aarch64.AArch64HotSpotRegisterConfig.getCallingConventionRegisters(CallingConvention$Type, JavaKind) may expose internal representation by returning AArch64HotSpotRegisterConfig.javaGeneralParameterRegisters  At AArch64HotSpotRegisterConfig.java:[line 212]
M V EI: jdk.vm.ci.hotspot.aarch64.AArch64HotSpotRegisterConfig.getCallerSaveRegisters() may expose internal representation by returning AArch64HotSpotRegisterConfig.callerSaved  At AArch64HotSpotRegisterConfig.java:[line 178]
M V EI: jdk.vm.ci.hotspot.aarch64.AArch64HotSpotRegisterConfig.getCallingConventionRegisters(CallingConvention$Type, JavaKind) may expose internal representation by returning AArch64HotSpotRegisterConfig.simdParameterRegisters  At AArch64HotSpotRegisterConfig.java:[line 215]
M D SF: Switch statement found in jdk.vm.ci.hotspot.HotSpotConstantPool.loadReferencedType(int, int) where default case is missing  At HotSpotConstantPool.java:[lines 685-690]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotConstantPool.getEntryAt(int)  At HotSpotConstantPool.java:[line 303]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotConstantPool.getIntAt(int)  At HotSpotConstantPool.java:[line 314]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotConstantPool.getLongAt(int)  At HotSpotConstantPool.java:[line 325]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotConstantPool.getFloatAt(int)  At HotSpotConstantPool.java:[line 336]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotConstantPool.getDoubleAt(int)  At HotSpotConstantPool.java:[line 347]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotConstantPool.getNameAndTypeAt(int)  At HotSpotConstantPool.java:[line 358]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotConstantPool.getUncachedKlassRefIndexAt(int)  At HotSpotConstantPool.java:[line 439]
M D ICAST: Result of integer multiplication cast to long in new jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl$FieldInfo(HotSpotResolvedObjectTypeImpl, int)  At HotSpotResolvedObjectTypeImpl.java:[line 594]
M D ICAST: Result of integer multiplication cast to long in jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl$FieldInfo.readFieldSlot(int)  At HotSpotResolvedObjectTypeImpl.java:[line 622]
M D REC: Exception is caught when Exception is not thrown in jdk.vm.ci.hotspot.HotSpotCodeCacheProvider.getTargetName(Call)  At HotSpotCodeCacheProvider.java:[line 88]
M V EI: jdk.vm.ci.hotspot.sparc.SPARCHotSpotRegisterConfig.getCallingConventionRegisters(CallingConvention$Type, JavaKind) may expose internal representation by returning SPARCHotSpotRegisterConfig.cpuCallerParameterRegisters  At SPARCHotSpotRegisterConfig.java:[line 223]
M V EI: jdk.vm.ci.hotspot.sparc.SPARCHotSpotRegisterConfig.getCallerSaveRegisters() may expose internal representation by returning SPARCHotSpotRegisterConfig.callerSaveRegisters  At SPARCHotSpotRegisterConfig.java:[line 187]
M V EI: jdk.vm.ci.hotspot.sparc.SPARCHotSpotRegisterConfig.getCallingConventionRegisters(CallingConvention$Type, JavaKind) may expose internal representation by returning SPARCHotSpotRegisterConfig.fpuFloatParameterRegisters  At SPARCHotSpotRegisterConfig.java:[line 226]
M V EI2: new jdk.vm.ci.code.RegisterSaveLayout(Register[], int[]) may expose internal representation by storing an externally mutable object into RegisterSaveLayout.slots  At RegisterSaveLayout.java:[line 56]
M V EI2: new jdk.vm.ci.code.RegisterSaveLayout(Register[], int[]) may expose internal representation by storing an externally mutable object into RegisterSaveLayout.registers  At RegisterSaveLayout.java:[line 55]
M B HE: jdk.vm.ci.code.BytecodeFrame defines equals but not hashCode  At BytecodeFrame.java:[lines 262-279]
M V EI2: new jdk.vm.ci.code.BytecodeFrame(BytecodeFrame, ResolvedJavaMethod, int, boolean, boolean, JavaValue[], JavaKind[], int, int, int) may expose internal representation by storing an externally mutable object into BytecodeFrame.slotKinds  At BytecodeFrame.java:[line 193]
M V EI2: new jdk.vm.ci.code.BytecodeFrame(BytecodeFrame, ResolvedJavaMethod, int, boolean, boolean, JavaValue[], JavaKind[], int, int, int) may expose internal representation by storing an externally mutable object into BytecodeFrame.values  At BytecodeFrame.java:[line 192]
M V EI: jdk.vm.ci.sparc.SPARC.getAvailableValueRegisters() may expose internal representation by returning SPARC.allRegisters  At SPARC.java:[line 252]
M P SS: Unread field: jdk.vm.ci.hotspot.aarch64.AArch64HotSpotVMConfig.maxFrameSize; should this field be static?  At AArch64HotSpotVMConfig.java:[line 42]
M P SS: Unread field: jdk.vm.ci.hotspot.amd64.AMD64HotSpotVMConfig.maxFrameSize; should this field be static?  At AMD64HotSpotVMConfig.java:[line 37]
M D UrF: Unread public/protected field: jdk.vm.ci.hotspot.HotSpotForeignCallTarget.address  At HotSpotForeignCallTarget.java:[line 35]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$BitData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$BranchData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$CounterData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$JumpData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 47-913]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$BitData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$BranchData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$CounterData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$JumpData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ArgInfoData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 883-887]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$BranchData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$CounterData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$JumpData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BitData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 389-407]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BranchData and jdk.vm.ci.hotspot.HotSpotMethodData$CounterData  At HotSpotMethodData.java:[lines 740-767]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BranchData and jdk.vm.ci.hotspot.HotSpotMethodData$JumpData  At HotSpotMethodData.java:[lines 740-767]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BranchData and jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData  At HotSpotMethodData.java:[lines 740-767]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BranchData and jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData  At HotSpotMethodData.java:[lines 740-767]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BranchData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 740-767]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BranchData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 740-767]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$BranchData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 740-767]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$CounterData and jdk.vm.ci.hotspot.HotSpotMethodData$JumpData  At HotSpotMethodData.java:[lines 413-435]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$CounterData and jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData  At HotSpotMethodData.java:[lines 413-435]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$CounterData and jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData  At HotSpotMethodData.java:[lines 413-435]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$CounterData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 413-435]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$CounterData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 413-435]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$CounterData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 413-435]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$JumpData and jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData  At HotSpotMethodData.java:[lines 441-469]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$JumpData and jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData  At HotSpotMethodData.java:[lines 441-469]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$JumpData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 441-469]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$JumpData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 441-469]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$JumpData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 441-469]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData and jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData  At HotSpotMethodData.java:[lines 795-877]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 795-877]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 795-877]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$MultiBranchData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 795-877]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData  At HotSpotMethodData.java:[lines 362-383]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 362-383]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$NoMethodData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 362-383]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData and jdk.vm.ci.hotspot.HotSpotMethodData$RetData  At HotSpotMethodData.java:[lines 588-605]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$ReceiverTypeData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 588-605]
M D IC: Initialization circularity between jdk.vm.ci.hotspot.HotSpotMethodData$RetData and jdk.vm.ci.hotspot.HotSpotMethodData$VirtualCallData  At HotSpotMethodData.java:[lines 730-735]
M V MS: jdk.vm.ci.common.InitTimer.initializingThread should be package protected  In InitTimer.java
M V MS: jdk.vm.ci.amd64.AMD64.valueRegistersSSE should be package protected  At AMD64.java:[line 134]
M V MS: jdk.vm.ci.amd64.AMD64.valueRegistersAVX512 should be package protected  At AMD64.java:[line 141]
M V MS: jdk.vm.ci.amd64.AMD64.allRegisters should be package protected  At AMD64.java:[line 156]
H V MS: jdk.vm.ci.aarch64.AArch64.allRegisters is a mutable array  At AArch64.java:[line 142]
M V MS: jdk.vm.ci.sparc.SPARC.allRegisters should be package protected  At SPARC.java:[line 210]
M M IS: Inconsistent synchronization of jdk.vm.ci.hotspot.HotSpotSpeculationLog.failedSpeculations; locked 50% of time  Unsynchronized access at HotSpotSpeculationLog.java:[line 58]
