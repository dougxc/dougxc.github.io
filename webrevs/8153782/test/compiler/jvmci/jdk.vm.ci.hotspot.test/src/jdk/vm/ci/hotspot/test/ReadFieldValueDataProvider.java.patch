--- old/test/compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/ReadFieldValueDataProvider.java	2016-05-10 14:31:37.000000000 +0200
+++ new/test/compiler/jvmci/jdk.vm.ci.hotspot.test/src/jdk/vm/ci/hotspot/test/ReadFieldValueDataProvider.java	2016-05-10 14:31:37.000000000 +0200
@@ -39,7 +39,6 @@
 import jdk.vm.ci.meta.JavaConstant;
 import org.testng.annotations.DataProvider;
 
-
 public class ReadFieldValueDataProvider {
 
     @DataProvider(name = "readFieldValueDataProvider")
@@ -48,8 +47,8 @@
         // Testing instance non-stable fields
         INSTANCE_FIELDS_MAP.entrySet().stream().forEach((instanceField) -> {
             cfgSet.add(new Object[]{instanceField.getKey(),
-                    DUMMY_CLASS_CONSTANT,
-                    instanceField.getValue()});
+                            DUMMY_CLASS_CONSTANT,
+                            instanceField.getValue()});
         });
         // Testing static non-stable fields with null as receiver
         STATIC_FIELDS_MAP.entrySet().stream().forEach((staticField) -> {
@@ -58,14 +57,14 @@
         // Testing static non-stable fields with JavaConstant.NULL_POINTER as receiver
         STATIC_FIELDS_MAP.entrySet().stream().forEach((staticField) -> {
             cfgSet.add(new Object[]{staticField.getKey(),
-                    JavaConstant.NULL_POINTER,
-                    staticField.getValue()});
+                            JavaConstant.NULL_POINTER,
+                            staticField.getValue()});
         });
         // Testing instance stable fields
         INSTANCE_STABLE_FIELDS_MAP.entrySet().stream().forEach((instanceField) -> {
             cfgSet.add(new Object[]{instanceField.getKey(),
-                    DUMMY_CLASS_CONSTANT,
-                    instanceField.getValue()});
+                            DUMMY_CLASS_CONSTANT,
+                            instanceField.getValue()});
         });
         // Testing static stable fields with null as receiver
         STATIC_STABLE_FIELDS_MAP.entrySet().stream().forEach((staticField) -> {
@@ -74,32 +73,32 @@
         // Testing static stable fields with JavaConstant.NULL_POINTER as receiver
         STATIC_STABLE_FIELDS_MAP.entrySet().stream().forEach((staticField) -> {
             cfgSet.add(new Object[]{staticField.getKey(),
-                    JavaConstant.NULL_POINTER,
-                    staticField.getValue()});
+                            JavaConstant.NULL_POINTER,
+                            staticField.getValue()});
         });
         // Testing instance non-stable array fields
         ARRAYS_MAP.entrySet().stream().forEach((instanceField) -> {
             cfgSet.add(new Object[]{instanceField.getKey(),
-                    DUMMY_CLASS_CONSTANT,
-                    instanceField.getValue()});
+                            DUMMY_CLASS_CONSTANT,
+                            instanceField.getValue()});
         });
         // Testing instance stable array fields
         STABLE_ARRAYS_MAP.entrySet().stream().forEach((instanceField) -> {
             cfgSet.add(new Object[]{instanceField.getKey(),
-                    DUMMY_CLASS_CONSTANT,
-                    instanceField.getValue()});
+                            DUMMY_CLASS_CONSTANT,
+                            instanceField.getValue()});
         });
         // Testing instance non-stable array-of-array fields
         ARRAY_ARRAYS_MAP.entrySet().stream().forEach((instanceField) -> {
             cfgSet.add(new Object[]{instanceField.getKey(),
-                    DUMMY_CLASS_CONSTANT,
-                    instanceField.getValue()});
+                            DUMMY_CLASS_CONSTANT,
+                            instanceField.getValue()});
         });
         // Testing instance stable array-of-array fields
         STABLE_ARRAY_ARRAYS_MAP.entrySet().stream().forEach((instanceField) -> {
             cfgSet.add(new Object[]{instanceField.getKey(),
-                    DUMMY_CLASS_CONSTANT,
-                    instanceField.getValue()});
+                            DUMMY_CLASS_CONSTANT,
+                            instanceField.getValue()});
         });
         // Testing instance fields with JavaConstant.NULL_POINTER as receiver
         INSTANCE_FIELDS_MAP.entrySet().stream().forEach((instanceField) -> {
@@ -108,8 +107,8 @@
         // Testing instance fields with an object that does not have the field
         INSTANCE_FIELDS_MAP.entrySet().stream().forEach((instanceField) -> {
             cfgSet.add(new Object[]{instanceField.getKey(),
-                    CONSTANT_REFLECTION_PROVIDER.forObject(DUMMY_CLASS_INSTANCE.objectField),
-                    null});
+                            CONSTANT_REFLECTION_PROVIDER.forObject(DUMMY_CLASS_INSTANCE.objectField),
+                            null});
         });
         return cfgSet.toArray(new Object[0][0]);
     }
