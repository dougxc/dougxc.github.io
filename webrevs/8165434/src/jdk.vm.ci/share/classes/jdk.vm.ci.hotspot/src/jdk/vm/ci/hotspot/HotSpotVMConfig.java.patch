--- old/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotVMConfig.java	2016-09-05 18:31:15.000000000 +0200
+++ new/src/jdk.vm.ci/share/classes/jdk.vm.ci.hotspot/src/jdk/vm/ci/hotspot/HotSpotVMConfig.java	2016-09-05 18:31:15.000000000 +0200
@@ -26,6 +26,7 @@
 import static jdk.vm.ci.hotspot.UnsafeAccess.UNSAFE;
 
 import jdk.internal.misc.Unsafe;
+import jdk.vm.ci.meta.ModifiersProvider;
 
 /**
  * Used to access native configuration details.
@@ -45,6 +46,11 @@
 
     HotSpotVMConfig(HotSpotVMConfigStore store) {
         super(store);
+        assert ModifiersProvider.SYNTHETIC == getConstant("JVM_ACC_SYNTHETIC", Integer.class);
+        assert ModifiersProvider.ANNOTATION == getConstant("JVM_ACC_ANNOTATION", Integer.class);
+        assert ModifiersProvider.BRIDGE == getConstant("JVM_ACC_BRIDGE", Integer.class);
+        assert ModifiersProvider.VARARGS == getConstant("JVM_ACC_VARARGS", Integer.class);
+        assert ModifiersProvider.ENUM == getConstant("JVM_ACC_ENUM", Integer.class);
     }
 
     /**
@@ -117,9 +123,6 @@
     final int jvmAccFieldHasGenericSignature = getConstant("JVM_ACC_FIELD_HAS_GENERIC_SIGNATURE", Integer.class);
     final int jvmAccIsCloneableFast = getConstant("JVM_ACC_IS_CLONEABLE_FAST", Integer.class);
 
-    // Modifier.SYNTHETIC is not public so we get it via vmStructs.
-    final int jvmAccSynthetic = getConstant("JVM_ACC_SYNTHETIC", Integer.class);
-
     // This is only valid on AMD64.
     final int runtimeCallStackSize = getConstant("frame::arg_reg_save_area_bytes", Integer.class, osArch.equals("amd64") ? null : 0);
 
