--- old/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop.phases/src/org/graalvm/compiler/loop/phases/LoopFullUnrollPhase.java	2020-06-17 23:33:12.000000000 +0200
+++ new/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.loop.phases/src/org/graalvm/compiler/loop/phases/LoopFullUnrollPhase.java	2020-06-17 23:33:12.000000000 +0200
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -24,6 +24,11 @@
 
 package org.graalvm.compiler.loop.phases;
 
+import java.util.Comparator;
+import java.util.List;
+import java.util.function.ToDoubleFunction;
+import java.util.function.ToIntFunction;
+
 import org.graalvm.compiler.core.common.GraalOptions;
 import org.graalvm.compiler.debug.CounterKey;
 import org.graalvm.compiler.debug.DebugContext;
@@ -32,11 +37,24 @@
 import org.graalvm.compiler.loop.LoopsData;
 import org.graalvm.compiler.nodes.StructuredGraph;
 import org.graalvm.compiler.nodes.spi.CoreProviders;
+import org.graalvm.compiler.options.Option;
+import org.graalvm.compiler.options.OptionKey;
+import org.graalvm.compiler.options.OptionType;
 import org.graalvm.compiler.phases.common.CanonicalizerPhase;
 
 public class LoopFullUnrollPhase extends LoopPhase<LoopPolicies> {
+    public static class Options {
+        @Option(help = "", type = OptionType.Expert) public static final OptionKey<Integer> FullUnrollMaxApplication = new OptionKey<>(60);
+    }
 
     private static final CounterKey FULLY_UNROLLED_LOOPS = DebugContext.counter("FullUnrolls");
+    public static final Comparator<LoopEx> LOOP_COMPARATOR;
+    static {
+        ToDoubleFunction<LoopEx> loopFreq = e -> e.loop().getHeader().getFirstPredecessor().getRelativeFrequency();
+        ToIntFunction<LoopEx> loopDepth = e -> e.loop().getDepth();
+        LOOP_COMPARATOR = Comparator.comparingDouble(loopFreq).thenComparingInt(loopDepth).reversed();
+    }
+
     private final CanonicalizerPhase canonicalizer;
 
     public LoopFullUnrollPhase(CanonicalizerPhase canonicalizer, LoopPolicies policies) {
@@ -50,11 +68,14 @@
             DebugContext debug = graph.getDebug();
             if (graph.hasLoops()) {
                 boolean peeled;
+                int applications = 0;
                 do {
                     peeled = false;
                     final LoopsData dataCounted = new LoopsData(graph);
                     dataCounted.detectedCountedLoops();
-                    for (LoopEx loop : dataCounted.countedLoops()) {
+                    List<LoopEx> countedLoops = dataCounted.countedLoops();
+                    countedLoops.sort(LOOP_COMPARATOR);
+                    for (LoopEx loop : countedLoops) {
                         if (getPolicies().shouldFullUnroll(loop)) {
                             debug.log("FullUnroll %s", loop);
                             LoopTransformations.fullUnroll(loop, context, canonicalizer);
@@ -65,7 +86,8 @@
                         }
                     }
                     dataCounted.deleteUnusedNodes();
-                } while (peeled);
+                    applications++;
+                } while (peeled && applications < Options.FullUnrollMaxApplication.getValue(graph.getOptions()));
             }
         }
     }
